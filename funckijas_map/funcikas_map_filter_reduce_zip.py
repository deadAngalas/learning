# map принимает 2 аргументы - функцию и итерируемый обьект (список) - берет функцию и принмает ее к каждому элементу в той последовательности, которой передали в map
#with open ('map.txt') as f:
#    n = int(f.readline())
#    for i in range(n):
#        a,b = map(int, f.readline().split())  # первый параметр указываем ту функцию, которую применяем к итерируемой последовательности
#        print(a,b)

def f (a,b):
    return a * b

a = map(lambda x: x+15, (2,4,5))
print(list(a))

# filter - используется для фильтрации элементов последовательности. В качестве аргумента получает какую-то функцию, которая возвращает либо True либо False
# и последовательность которую фильтрует

def g (a):
    if a % 2 == 0:
        return a

a = filter(lambda x: x % 2 == 0, (2,4,5))
print(list(a))

# reduce (модуль)- также получает функцию и какую-то последовательность, применяет ее и возвращает 1 значение

from functools import reduce
from hashlib import shake_128

print(reduce(lambda a,b: a*b,(2,3,4,5)))

# zip - обьеденяет в кортеже несколько итерируемых последовательностей

s1=[1,2,4,5,6]
s2='abcdef'

print(list(zip(s1,s2)))

