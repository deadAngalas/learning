# регулярные выражения - строка, которая задает шаблон поиска подстрок в каком-либо тексте (шаблон по которому осуществляется поиск)

import re
from ssl import SSLSocket

s = 'AC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DC'
result = re.match('AC',s)  #ищет по заданному шаблону(регулярному выражению) совпадения в начале строки - а после указать где искать (в какой строке)
print(result)

result2 = re.search('DC',s) # ищет по всей строки и возвращяет 1 найденное
print(result2[0]) # [0] если вывести просто то, что искали

result3 = re.findall('AC',s) #ищет и возвращает список ВСЕХ найденных подстрок в строке
print(result3)

result4 = re.split('/',s, maxsplit=3) # позваляет разделить строку по шаблону (рег.выражению)   #maxsplit выполнит разбиение списка столько раз, сколько укажем
print(result4)

result5 = re.sub('A','D', s) # заменяет шаблон на другую строку - что заменяем на что, потом где
print(result5) 

result6 = re.fullmatch('A',s) # проверяет подходит ли весь шаблон под конкретную строчку (сравнивает)
print(result6)



ss = '346+346436    --- sdmflndsgj3469&*$2    JHILSDFNjklfqqq'
result8 = re.search(r's.m',ss) # r - сырая строка - строка в котороый отключено экранирование (\t, \n)
# . заменяет 1 любой символ, кроме символа новой строки
print(result8)

result9 = re.search(r'[f]',ss) # \d выведет любую цифру  # \D выведет любой символ кроме цифры     \s любой пробельный символ \S непробельный символ
# \w любая цифра буква или _        \W не букву не цифра не _    \b указывает начало или конец когого-то слова \B не укажит границы слова
# \d*  звездочка указывает 0 или более вхождения каких-то символов после первой найденого элемента
# \d+ одно или более вхождений
# [] определенный набор(диапозон) символов     диапозон 4-7            [^4-6] выведет все, что не входил в этот диапозон
# H|f  выведет либо то, либо то

# к одиночным шаблоном можно применить квантификаторы - указать кол-вол повторий шаблона
# \d{4}  в фигурных скобках указываем сколько раз повторяем
# \d{1,3} от 1 до 3 / 2 повтория подхотят под этот диапозон
# \d{1,}   минимальное число повторий/ не менее чем 1 (максимального нет)
# \d{,6}   максимум 6 повторений/ не больше
print(result9)


sss = 'А ты учился в Б классе?'
result10 = re.findall(r'\b[бвгджзклмнпрстфхчшщБВГДЖЗКЛМНПРСТФХЧШЩ]\w*',sss) # + если находит 1 из этих букв и после нее стоит еще буква (не пробел),то он это понимает как целое слово и выведет его
print(result10)